setTimeout -> Run the function given as the first argument after the duration given as the second
setInterval -> Run the function given as the first argument every amount of seconds given as the second argument
module.exports -> The require method returns the object defined as the module.exports in the given file
require() -> All code in the file given to the require method is run
readStream.on() -> set callbacks on events from the stream. The "data" event is fired every time new data reach the stream
npm init -> Initialise package.json
lodash -> Utilities: 
		_.random(min, max) (returns random number) 
		_.once(function) (allow the function within run only once and nothing happens on subsequent calls)
http -> The http module is used for setting up a server
http.createServer(callbackFunction) -> Creates a server object which runs the callback function each time in gets a request
Request -> We can access the request we got from the first argument given to the callback function
		Request.url() (returns the relative path accessed)
Response -> We can create a response to the request using the second argument given to the callback function
		Response.write() (writes to the response body)
		Response.setHeaders(key, value) (adds a key-value pair to the response headers)
		Response.statusCode (the status code that the response will have)
		Response.end() (Sends the response)
Start server -> server.listen(port, hostname, callbackFunction) sets the server to listen on the given port and calls the callbackFunction once everything is set up

-------- Express ---------
Create App -> app = express()
Start Server -> app.listen(port)
Accept GET requests -> app.get(url, callbackFunction) the callback function accepts as the first argument the request and as the second the response
response.send() -> Works like response.write() + response.end() but also infers the content-type header and the status code
Send html file -> response.sendFile(path, options) (the path is absolute by default, can change from the options)
Redirecting -> response.redirect(newUrl)
Checking order -> The app.get() methods work much like the cases of a switch statement. The app checks the urls from top to bottom and stops when it finds an app.get() callback matching the requests url. The app.use() callback at the bottom is like a default statement and works like a wildcard (runs for every url, thats why it should be at the bottom)
Set status code -> response.status(code) (returns the response object)
Middleware -> Code that runs between a request and a response. The app.get() and app.use() methods are Middleware. They run serially until one sends a response or exits the app
Code for every request -> If you want some code to run for every request before determining the path (logging, connection to db, user auth) you can put app.use() methods at the top as long as they dont send any responses to the client and they call the function given as a third argument to the callback function (next)
morgan() -> Third party logger Middleware
		const morgan = require("morgan")
		app.use(morgan())
Static Files -> Files in the server that are accessible to the client, through their path, without explicitly sending them as a response
Set folder with static files -> app.use(express.static(folderPath))
Access path parameters -> Request.params.paramName e.g. /books/:id
Fetch for node -> Node doesn't have the fetch api by default yet. Install the node-fetch package (npm i node-fetch@2)
Send JSON -> Respone.json(object)

-------- Mongoose ---------
Create a Schema -> schema = new mongoose.Schema({
					field1: fieldAttributesObject1	e.g. {type: String, required: true}
					field2: fieldAttributesObject2
					...
				    })
Schema -> Defined the structure of our documents
Model -> Surrounds that with a Collection
Create Model -> mongoose.model(collectionNameInSingular, schema) (if the collection already exists it finds it)
mongoose.model() -> Return Type: Constructor to create a document in the specified collection
Create a document -> document = new returnedModel()
Inserting Documents -> Document.save() (returns Promise that returns the inserted object)
Read Collection -> returnedModel.find() (returns Promise that returns collection in json)
Read Single Document -> returnedModel.findById() (returns Promise that returns collection in json)