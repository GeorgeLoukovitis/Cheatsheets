Structure -> MongoDB is a NoSQL database, meaning that it has collections which contain documents instead of tables. Documents are structured like JSON files. 1 collection per table 1 document per record
Nested Documents -> A document can have a property which is also a document or an array of documents
Turn Service On/Off -> Type Services on the Windows search bar, open the app and find the MongoDB service
----------- MongoDB Shell ----------- 
Select Database -> use databaseName (the database doesn't need to already exist)
Show Databases -> show dbs
Show Collections of the selected database -> show collections
Reference Database -> The selected database is stored in the variable db
Printing variables -> You can print a variable by typing it's name
Add a document -> Collection.insertOne(documentAsObject) (if the collection doesn't already exists it's gonna be created)
Add many documents -> Collection.insertMany(arrayOfDocumentsAsObjects) (if the collection doesn't already exists it's gonna be created)
Show collection -> Collection.find() (first 20 - there is also the findOne variant) 
Filter output -> Collection.find({ field1: value1, field2: value2 })
Select specific fields of the filtered output -> Collection.find({ field1: value1, field2: value2 }, { field1: 1, field2: 1 }) (give an object mapping wanted fields to 1 as the second argument)
Collection.find() return type -> Collection
Collection.findOne() return type -> Document
Count the documents of a collection -> Collection.count()
Limit the amount of documents in a collection -> Collection.limit(number)
Sort the documents of a collection -> Collection.sort({ fieldToOrderBy: 1 }) (Change 1 to -1 for DESC order)
Using comparison operators in find -> Replace the value you want a field to have with an object that map an operator with the value to be compared with
	e.g. Collection.find({ pages: { $gt : 300 } })
	Prototype Collection.find({ field1: { operator1: value1 } })
Logical OR -> Collection.find({ $or: [ conditionsObject1, conditionsObject2, ... ] })
	e.g. Collection.find({ $or: [{ rating: { $lte: 5 } }, { rating: { $gte: 9 } }] })
Check if a field is a range of values -> Collection.find({ field1: { $in : [possibleValue1, possibleValue2, possibleValue3] } }) (the opposite can be achieved with the $nin)
Check if a value is inside an array field -> Collection.find({ arrayField: valueToBeInside }) (arrayField has arrays as values, valueToBeInside is a singular value)
Check if an array field contains a subset -> Collection.find({ arrayField: { $all: [value1, value2, ...] } })
Delete Documents -> Works like find (Collection.deleteOne(filterObject), Collection.deleteMany(filterObject))
Update Documents -> Works like find + insert -> Collection.updateMany(filterObject, { $set: { field1: newValue1, field2: newValue2 } })
Increment values of fields -> Use $inc instead of $set on update Collection.updateMany(filterObject, { $inc: { field1: increment1, field2: increment2} })
Remove a value from an array field -> Use $pull instead of $inc on update Collection.updateMany(filterObject, { $pull: { arrayField: valueToRemove } })
	e.g. db.books.updateMany({title: "Gay"}, {$pull: {genres:"discovery"}})
Add a value from an array field -> Use $push instead of $pull on update Collection.updateMany(filterObject, { $push: { arrayField: valueToRemove } })
	e.g. db.books.updateMany({title: "Gay"}, {$push: {genres:"religion"}})
----------- API (+ Express) ----------- 
Send JSON -> Respone.json(object)
Import MongoDb -> const {MongoClient} = require("mongodb")
Connect to database -> MongoClient.connect(connectionString) (returns Promise)
	e.g. MongoClient.connect('mongodb://localhost:27017/bookstore')
    		.then((client)=>{
      	    let dbConnection = client.db()
      	    return dbConnection
    		})
Access a Collection -> db.collection(collectionName)
Get documents ->  db.collection(collectionName)
				.find(filterObject)
				.sort(orderCriteriaObject)
				.forEach(document => actionWithDocument)
				.then(promiseCompletionCallback)	
		e.g.	db.collection("books")
    				.find({rating: { $gte: 8 }})
    				.sort({author: 1})
    				.forEach(book => books.push(book))
    				.then(()=>{
      			  res.status(200).json(books)
    				})
    				.catch((err)=>{
      			  console.log(err)
    				})
Get a document ->  db.collection("books")
  				.findOne({_id: ObjectId(bookId)})
  				.then(doc => {
  				  res.status(200).json(doc)
  				})
  				.catch((err)=>{
  				  res.status(500).json({error: "Can find Document"})
  				})